/**
* @namespace for Components
* Components to place inside Layout
* 
*/

if(window['comp']===undefined) comp = {};

comp.log = (function(container){
    damas.search_mongo({'time': {$exists:true}}, {"time":-1},200,0, function(res){
        damas.read(res, function(assets){
            var str = '<table><thead><th><input type="checkbox" id="select-all" /></th><th>author</th><th>file</th><th>time &xutri;</th><th>comment</th></thead><tbody>';
            for (var i=0; i<assets.length; i++){
                str +=  '<tr>';
                str +=  '<td><input type="checkbox"/></td>';
                str +=  '<td>'+assets[i].author+'</td>';
                str +=  '<td><a href="#view='+assets[i].file+'">'+assets[i].file+'</a></td>';
                str +=  '<td>'+new Date(parseInt(assets[i].time))+'</td>';
                str +=  '<td style="white-space:normal">'+assets[i].comment+'</td>';
                str +=  '</tr>';
            }
            str += '</tbody>';
            str += '</table>';
            // Component destination
            container.innerHTML = str;
        });
    });
});

comp.search = (function(container, terms){
    // Temporary Table - To do : Replace with a table generated by search in db
    var resTable = document.createElement('table');
    resTable.className = 'resultsTable';
    resTable.innerHTML = 'results'
    var resTableLine = document.createElement('tr');
    resTable.appendChild(resTableLine);
    var resTableRow1 = document.createElement('td');
    var resTableRow2 = document.createElement('td');
    var resTableRow3 = document.createElement('td');
    var resTableRow1View = document.createElement('a');
//    logTableRow1View.setAttribute('href', '#view=nodeFile');
    resTableRow1View.innerHTML = 'viewNode';
    resTableRow2.id = 'btEditor';
    resTableRow2.innerHTML = 'editNode';
    resTableRow3.innerHTML = 'nodeKey';
    resTableRow1.appendChild(resTableRow1View);
    resTableLine.appendChild(resTableRow1);
    resTableLine.appendChild(resTableRow2);
    resTableLine.appendChild(resTableRow3);
    
    resTableRow1View.addEventListener('click', function(e){
        addHash('view=nodeFile');
    });
    
    resTableRow2.addEventListener('click', function(e){
        window.location.hash = '#edit=nodeFile';
    });
    
    // Component destination
    container.appendChild(resTable);
});

comp.upload = (function(container){
    // To do : Connect upload damas-flow fonctions 
    

    damasflow_ondrop = function ( e )
    {
        //alert('COMING SOON :) Drop your assets and connect them, in this web page');
        e.stopPropagation();
        if(e.preventDefault) e.preventDefault();

        // DEBUG START
        console.log(e.dataTransfer);
        console.log(e.dataTransfer.files);
        if(e.dataTransfer.types)
        {
            var keys = {};
            for(i=0;i<e.dataTransfer.types.length;i++)
            {
                keys[e.dataTransfer.types[i]] = e.dataTransfer.getData(e.dataTransfer.types[i]);
            }
            console.log(keys);
        }
        // END DEBUG

        var path;
        if (keys['text/x-moz-url'])
            path = keys['text/x-moz-url'];
        if (keys['text/plain'])
            path = keys['text/plain'].trim();

        console.log(path);
        if(!path)
        {
            alert('Could not determine the path for the file ' + e.dataTransfer.files[0].name +': Drop aborted' );
            return;
        }

        if (path.indexOf('http://') === 0 || path.indexOf('https://') === 0)
        {
            var text = e.dataTransfer.getData('Text');
            console.log(text);
            if( text.indexOf(window.location.origin) === 0)
            {
                // DROPPED AN EXISTING NODE FROM SAME SERVER
                var r = new RegExp(window.location.origin+'.*#view=');
                var id = parseInt(text.replace(r, ''));
                console.log('Dropped node #' +id);
                //var elem = damas.read_rest(parseInt(id));
                damas.utils.command_a( {cmd: 'graph', id: id }, function(res){
                    graph.load( JSON.parse( res.text ));
                });
                return;
            }
        }

        var newPath= processPath(path);

        if(!newPath){
            newPath=path;
            var newWd=prompt("This file doesn't appear to be held in a defined local work directory, thus we cannot extract a relative path from its absolute path:\n"+path+"\nYou can set a workdir now:",path.replace(/\/[^\/]*$/,""));
            if(newWd){
                addWorkdirs(newWd);
                newPath= path.replace(new RegExp("^"+newWd+"/?"), '');
            }
            else
            {
                return;
            }
        }
        if(newPath.indexOf("/")!=0)
            newPath= "/"+newPath;

        //sha1sum(e.dataTransfer.files[0]);

        damas.search_rest('file:'+newPath, function(res){
            if(res.length>0)
            {
                //window.document.location.hash = 'graph='+res[0];
                //damas.get_rest( 'graph/'+res[0], function(res){
                var newHash = getHash();
                if(!newHash.graph) newHash.graph = res[0];
                else newHash.graph += ',' + res[0];
                doHash(newHash);
                damas.graph( res[0], function(res){
                    graph.load(res);
                    //graph.load( JSON.parse( res ));
                });
                if( confirm('Update ' + decodeURIComponent(newPath) + '?'))
                {
                    upload_rest(e.dataTransfer.files[0],newPath, res[0], function(node){
                    });
                }
            }
            else
            {
                if( newPath = prompt('Publish as', newPath))
                {
                    upload_rest(e.dataTransfer.files[0],newPath, null, function(node){
                        graph.newNode(node);
                    });
                }
            }
        });
        return;
    }

    var zoneDrop = document.createElement('div');
    zoneDrop.className = 'testdrop';
    container.appendChild(zoneDrop);

    zoneDrop.ondrop = damasflow_ondrop;

});